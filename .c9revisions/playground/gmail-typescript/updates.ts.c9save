{"ts":1349339590107,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"///<reference path=\"externs.d.ts\"/>\n// require 'longjohn'\nimport flow = module('flow')\nvar a_def = flow.define\nvar ex = flow.exec\nimport settings = module('../../settings')\nimport imap = module(\"imap\")\nvar ImapConnection = imap.ImapConnection\nimport util = module( \"util\")\nimport repl = module( 'repl')\nimport Promise = module( 'when')\nimport jsprops = module('jsprops')\nvar prop = jsprops.property\nimport sugar = module('sugar')\n\nconnection = new ImapConnection({\n\tusername: settings.gmail_username,\n\tpassword: settings.gmail_password,\n\thost: settings.gmail_host || \"imap.gmail.com\",\n\tport: 993,\n\tsecure: true\n})\n\n// TODO add event emitter\nclass BaseClass {\n\trepl() {\n\t\trepl.start({\n\t\t\t  prompt: \"repl> \",\n\t\t\t  input: process.stdin,\n\t\t\t  output: process.stdout\n\t\t\t}).context = { foo: this }\n\t}\n\tlog() {\n\t\tconsole.log.apply( arguments )\n\t}\n}\n\n// TODO config\nObject.merge( settings, {gmail_max_results: 300})\n\n/*\nTODO emit:\n- new-msg msg\n- changed-label {msg, new_labels, removed_labels}\n*/\n\nclass Channel {\n\tactive: bool = true;\n\tlast_update: number = 0;\n\tupdate_interval: number = 10*1000;\n\tcmd: (string?) => string = prop('cmd');\n\n\tconstructor(\n\t\tpublic manager: GmailManager,\n\t\tpublic name: string = \"noname\"\n\t) {}\n\n\tconnection() {\n\t\tthis.queue().push( Promise.defer())\n\t\tthis.queue()[-1]\n\t}\n}\n\nclass GmailManager {\n\n}\n\nclass Gmail extends BaseClass {\n\n}\n\n\n//\t# Singleton manager\n//\tmanager: null\n//\t@Manager: class GmailManager\n//\t\t@locked: no\n//\t\t@cursor: 0\n//\t\t@channels: prop('channels', null, [])\n//\n//\t\t@createChannel: (name, update_interval) ->\n//\t\t\t@channels[name] = new Channel this, update_interval\n//\t\t\t@channels[name]\n//\n//\t\t# basic schedule implementation\n//\t\t@activate: ->\n//\t\t\treturn if @locked\n//\t\t\t@locked = yes\n//\t\t\tchannel = @channels().sortBy(\"last_update\")[ @cursor_++ ]\n//\t\t\tif @cursor is @channels().length\n//\t\t\t\t@cursor = 0\n//\t\t\t# get promise resolvals for the interval and the request\n//\t\t\tresolve = (Promise.defer().promise.resolve for i in [0, 1])\n//\t\t\tsetTimeout resolve[0], @minInterval\n//\t\t\t# run channels command\n//\t\t\tchannel.cmd resolve[1]\n//\t\t\t# run activate once more after above promises are fulfilled\n//\t\t\tPromise.all(resolve).then activate.bind @\n//\n//\t\t@minInterval_: ->\n//\t\t\tMath.min ch.update_interval for ch in @channels\n//\n//\timap: null\n//\tconnection: null\n//\tqueries: null\n//\tmonitored_ : []\n//\n//\tconstructor: (@connection, next) ->\n//\t\t@manager :: GmailManagerCtr\n//\t\t@manager = @constructor.Manager\n//\n//\t\t@connection ::\n//\t\t\tgmail_username: Str\n//\t\t\tgmail_password: Str\n//\t\t\tgmail_host: Str?\n//\t\t@connection = @connection\n//\n//\t\tquery_ctr = ? {\n//\t\t\tfreq: Num\n//\t\t\tquery: Str\n//\t\t}\n//\n//\t\t@queries :: [...query_ctr]\n//\t\t@queries = []\n//\n//#\t\t\tif @connection then @connect @ else @\n//\t\t@connect next\n//\n//\t\tdo @repl\n//\n//\tconnect: a_def(\n//\t\t(@next) ->\n//\t\t\t@this.log 'connecting'\n//\t\t\tdata = @this.connection\n//\t\t\t@this.imap = new ImapConnection\n//\t\t\t\tusername: data.gmail_username\n//\t\t\t\tpassword: data.gmail_password\n//\t\t\t\thost: data.gmail_host or \"imap.gmail.com\"\n//\t\t\t\tport: 993\n//\t\t\t\tsecure: true\n//\t\t\t@this.imap.connect @\n//\t\t->\n//\t\t\t@this.imap.openBox \"[Gmail]/All Mail\", false, @next\n//\t)\n//\n//\taddSearch: (query, update = 5) ->\n//\t\t@log \"adding a new search #{query}\"\n//\t\t@queries.push { query, freq: update }\n//\t\t# TODO extract check\n//\t\tchannel = @manager.createChannel query, update*1000\n//\t\tchannel.cmd = (next) =>\n//\t\t\t@fetchQuery query, channel.getConnection, =>\n//\t\t\t\tpromise = @fetchQuery2_ arguments\n//\t\t\t\tpromise.then =>\n//\t\t\t\t\tnext()\n//\t\t\t\t\t# TODO later\n//\t\t\t\t\t# @emit \"query-fetched\"\n//\t\t@manager.activate()\n//\n//\tfetchQuery: (query, connection, next) ->\n//\t\t@this.log \"performing a search for #{query}\"\n//\t\tconnection.then =>\n//\t\t\t@this.imap.search [ [ 'X-GM-RAW', query ] ], next\n//\n//\tfetchQuery2_: (err, results) ->\n//\t\t# TODO labels\n//\t\t@this.log 'got search results'\n//\t\tcontent = headers: [ \"id\", \"from\", \"to\", \"subject\", \"date\" ]\n//\t\tfetch = @this.imap.fetch results, content\n//\n//\t\tdeferred = Promise.defer()\n//\t\tfetch.on \"message\", (msg) =>\n//#\t\t\t\t\tmsg.on \"data\", (chunk) =>\n//#\t\t\t\t\t\t@this.log \"Got message chunk of size \" + chunk.length\n//\t\t\tmsg.on \"end\", =>\n//\t\t\t\t@this.log \"Finished message: \" + util.inspect msg, false, 5\n//\t\t\t\tif !~ @this.monitored_.indexOf msg.id\n//\t\t\t\t\t# TODO event\n//\t\t\t\t\t@this.log 'new msg'\n//\t\t\t\t\t@this.monitored_.push msg.id\n//\t\t\t\t\t# TODO later\n//\t\t\t\t\t# @emit \"new-msg\"\n//#\t\t\t\t\telse\n//#\t\t\t\t\t\t# TODO compare labels\n//#\t\t\t\t\t\t# TODO check new msgs in the thread\n//\t\t\t\tdeferred.resolve msg\n//\t\tfetch.on \"error\", (err) =>\n//\t\t\t# new Error ???\n//\t\t\tdeferred.reject err\n//\n//\t\t# ret\n//\t\tdeferred.promise\n//\n//\tclose: -> @imap.logout\n//\t\t# TODO remove channel from the manager\n//\n//Gmail.Manager :: GmailManagerCtr\n//Gmail.Manager = Gmail.Manager\n//\n//for prop, ctr of GmailCtr.oc\n//    continue if not Gmail::[prop] or\n//        prop is 'constructor'\n//    Gmail::[prop] :: ctr\n//    Gmail::[prop] = Gmail::[prop]\n//\n//box = null\n//ex(\n//\tclass Gmail\n//\t\tconstructor: (@a) ->\n//\t-> box = new Gmail settings, @\n//\t-> box.addSearch '*'\n//)\n//setTimeout box.close.bind box, 20\n"]],"start1":0,"start2":0,"length1":0,"length2":5075}]],"length":5075}
{"contributors":[],"silentsave":false,"ts":1349340369635,"patch":[[{"diffs":[[0,"ow.exec\n"],[1,"//"],[0,"import s"]],"start1":122,"start2":122,"length1":16,"length2":18}]],"length":5077,"saved":false}
{"ts":1349340382221,"patch":[[{"diffs":[[0,"ow.exec\n"],[-1,"//"],[0,"import s"]],"start1":122,"start2":122,"length1":18,"length2":16}]],"length":5075,"saved":false}
{"ts":1349340389563,"patch":[[{"diffs":[[0,"ugar')\n\n"],[1,"var "],[0,"connecti"]],"start1":423,"start2":423,"length1":16,"length2":20}]],"length":5079,"saved":false}
{"ts":1349340437951,"patch":[[{"diffs":[[0,"th=\""],[-1,"externs"],[1,"node"],[0,".d.t"]],"start1":16,"start2":16,"length1":15,"length2":12}]],"length":5076,"saved":false}
{"ts":1349340441452,"patch":[[{"diffs":[[1,"///<reference path=\"externs.d.ts\"/>\n"],[0,"///<refe"]],"start1":0,"start2":0,"length1":8,"length2":44}]],"length":5112,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349349462366,"patch":[[{"diffs":[[0,".d.ts\"/>"],[1,"\r"],[0,"\n///<ref"]],"start1":27,"start2":27,"length1":16,"length2":17},{"diffs":[[0,".d.ts\"/>"],[1,"\r"],[0,"\n// requ"]],"start1":61,"start2":61,"length1":16,"length2":17},{"diffs":[[0,"ongjohn'"],[1,"\r"],[0,"\nimport "]],"start1":84,"start2":84,"length1":16,"length2":17},{"diffs":[[0,"('flow')"],[1,"\r"],[0,"\nvar a_d"]],"start1":114,"start2":114,"length1":16,"length2":17},{"diffs":[[0,"w.define"],[1,"\r"],[0,"\nvar ex "]],"start1":139,"start2":139,"length1":16,"length2":17},{"diffs":[[0,"low.exec"],[1,"\r"],[0,"\nimport "]],"start1":159,"start2":159,"length1":16,"length2":17},{"diffs":[[0,"ttings')"],[1,"\r"],[0,"\nimport "]],"start1":203,"start2":203,"length1":16,"length2":17},{"diffs":[[0,"(\"imap\")"],[1,"\r"],[0,"\nvar Ima"]],"start1":233,"start2":233,"length1":16,"length2":17},{"diffs":[[0,"nnection"],[1,"\r"],[0,"\nimport "]],"start1":275,"start2":275,"length1":16,"length2":17},{"diffs":[[0," \"util\")"],[1,"\r"],[0,"\nimport "]],"start1":306,"start2":306,"length1":16,"length2":17},{"diffs":[[0," 'repl')"],[1,"\r"],[0,"\nimport "]],"start1":337,"start2":337,"length1":16,"length2":17},{"diffs":[[0," 'when')"],[1,"\r"],[0,"\nimport "]],"start1":371,"start2":371,"length1":16,"length2":17},{"diffs":[[0,"sprops')"],[1,"\r"],[0,"\nvar pro"]],"start1":407,"start2":407,"length1":16,"length2":17},{"diffs":[[0,"property"],[1,"\r"],[0,"\nimport "]],"start1":436,"start2":436,"length1":16,"length2":17},{"diffs":[[0,"'sugar')"],[-1,"\n"],[1,"\r\n\r"],[0,"\nvar con"]],"start1":468,"start2":468,"length1":17,"length2":19},{"diffs":[[0,"ection({"],[-1,"\n\t"],[1,"\r\n    "],[0,"username"]],"start1":509,"start2":509,"length1":18,"length2":22},{"diffs":[[0,"sername,"],[1,"\r"],[0,"\n\tpasswo"]],"start1":549,"start2":549,"length1":16,"length2":17},{"diffs":[[0,"assword,"],[1,"\r"],[0,"\n\thost: "]],"start1":586,"start2":586,"length1":16,"length2":17},{"diffs":[[0,"il.com\","],[1,"\r"],[0,"\n\tport: "]],"start1":635,"start2":635,"length1":16,"length2":17},{"diffs":[[0,"rt: 993,"],[1,"\r"],[0,"\n\tsecure"]],"start1":648,"start2":648,"length1":16,"length2":17},{"diffs":[[0,"true"],[1,"\r"],[0,"\n})"],[-1,"\n"],[1,"\r\n\r"],[0,"\n// "]],"start1":667,"start2":667,"length1":12,"length2":15},{"diffs":[[0," emitter"],[1,"\r"],[0,"\nclass B"]],"start1":696,"start2":696,"length1":16,"length2":17},{"diffs":[[0,"eClass {"],[1,"\r"],[0,"\n\trepl()"]],"start1":715,"start2":715,"length1":16,"length2":17},{"diffs":[[0,"repl() {"],[1,"\r"],[0,"\n\t\t"],[1,"var repl = "],[0,"repl.sta"]],"start1":726,"start2":726,"length1":19,"length2":31},{"diffs":[[0,".start({"],[1,"\r"],[0,"\n\t\t"],[-1,"\t"],[0,"  prompt"]],"start1":753,"start2":753,"length1":20,"length2":20},{"diffs":[[0,"repl> \","],[1,"\r"],[0,"\n"],[-1,"\t"],[0,"\t\t  inpu"]],"start1":776,"start2":776,"length1":18,"length2":18},{"diffs":[[0,"s.stdin,"],[1,"\r"],[0,"\n\t\t"],[-1,"\t"],[0,"  output"]],"start1":803,"start2":803,"length1":20,"length2":20},{"diffs":[[0,"dout"],[1,"\r"],[0,"\n"],[-1,"\t"],[0,"\t\t})"],[-1,".context = { foo:"],[1,"\r\n\t\trepl.context.this ="],[0," this"],[-1," }"],[1,"\r"],[0,"\n\t}"],[1,"\r"],[0,"\n\tlo"]],"start1":835,"start2":835,"length1":41,"length2":47},{"diffs":[[0,"\tlog() {"],[1,"\r"],[0,"\n\t\tconso"]],"start1":879,"start2":879,"length1":16,"length2":17},{"diffs":[[0,"g.apply("],[1," console,"],[0," argumen"]],"start1":901,"start2":901,"length1":16,"length2":25},{"diffs":[[0,"uments )"],[1,"\r"],[0,"\n\t}"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\n// TODO"]],"start1":922,"start2":922,"length1":22,"length2":26},{"diffs":[[0,"O config"],[1,"\r"],[0,"\nObject."]],"start1":947,"start2":947,"length1":16,"length2":17},{"diffs":[[0,"00})"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/*"],[1,"\r"],[0,"\nTOD"]],"start1":1002,"start2":1002,"length1":12,"length2":15},{"diffs":[[0,"DO emit:"],[1,"\r"],[0,"\n- new-m"]],"start1":1016,"start2":1016,"length1":16,"length2":17},{"diffs":[[0,"-msg msg"],[1,"\r"],[0,"\n- chang"]],"start1":1031,"start2":1031,"length1":16,"length2":17},{"diffs":[[0,"els}"],[1,"\r"],[0,"\n*/"],[-1,"\n\nclass Channel"],[1,"\r\n\r\ninterface Message {\r\n\r\n}\r\n\r\nclass GmailSearch"],[0," {"],[1,"\r"],[0,"\n\tac"]],"start1":1086,"start2":1086,"length1":28,"length2":64},{"diffs":[[0," = true;"],[1,"\r"],[0,"\n\tlast_u"]],"start1":1160,"start2":1160,"length1":16,"length2":17},{"diffs":[[0,"= 0;"],[-1,"\n\tupdate_interval: number = 10*1000;"],[1,"\r"],[0,"\n\tcm"]],"start1":1191,"start2":1191,"length1":44,"length2":9},{"diffs":[[0,"d');"],[-1,"\n\n\tconstructor(\n\t\tpublic manager: GmailManager,\n\t\tpublic name: string = \"noname\"\n\t) {}\n\n\tconnection() {\n\t\tthis.queue().push( Promise.defer())\n\t\tthis.queue()[-1]\n\t}\n}\n\nclass GmailManager {\n\n}\n\nclass Gmail extends BaseClass {\n\n}\n\n\n//\t# Singleton manager\n//\tmanager: null\n//\t@Manager: class GmailManager\n//\t\t@locked: no\n//\t\t@cursor: 0\n//\t\t@channels: prop('channels', null, [])\n//\n//\t\t@createChannel: (name, update_interval) ->\n//\t\t\t@channels[name] = new Channel this, update_interval\n//\t\t\t@channels[name]\n//\n//\t\t# basic schedule implementation\n//\t\t@activate: ->\n//\t\t\treturn if @locked\n//\t\t\t@locked = yes\n//\t\t\tchannel = @channels().sortBy(\"last_update\")[ @cursor_++ ]\n//\t\t\tif @cursor is @channels().length\n//\t\t\t\t@cursor = 0\n//\t\t\t# get promise resolvals for the interval and the request\n//\t\t\tresolve = (Promise.defer().promise.resolve for i in [0, 1])\n//\t\t\tsetTimeout resolve[0], @minInterval\n//\t\t\t# run channels command\n//\t\t\tchannel.cmd resolve[1]\n//\t\t\t# run activate once more after above promises are fulfilled\n//\t\t\tPromise.all(resolve).then activate.bind @\n//\n//\t\t@minInterval_: ->\n//\t\t\tMath.min ch.update_interval for ch in @channels\n//\n//\timap: null\n//\tconnection: null\n//\tqueries: null\n//\tmonitored_ : []\n//\n//\tconstructor: (@connection, next) ->\n//\t\t@manager :: GmailManagerCtr\n//\t\t@manager = @constructor.Manager\n//\n//\t\t@connection ::\n//\t\t\tgmail_username: Str\n//\t\t\tgmail_password: Str\n//\t\t\tgmail_host: Str?\n//\t\t@connection = @connection\n//\n//\t\tquery_ctr = ? {\n//\t\t\tfreq: Num\n//\t\t\tquery: Str\n//\t\t}\n//\n//\t\t@queries :: [...query_ctr]\n//\t\t@queries = []\n//\n//#\t\t\tif @connection then @connect @ else @\n//\t\t@connect next\n//\n//\t\tdo @repl\n//\n//\tconnect: a_def(\n//\t\t(@next) ->\n//\t\t\t@this.log 'connecting'\n//\t\t\tdata = @this.connection\n//\t\t\t@this.imap = new ImapConnection\n//\t\t\t\tusername: data.gmail_username\n//\t\t\t\tpassword: data.gmail_password\n//\t\t\t\thost: data.gmail_host or \"imap.gmail.com\"\n//\t\t\t\tport: 993\n//\t\t\t\tsecure: true\n//\t\t\t@this.imap.connect @\n//\t\t->\n//\t\t\t@this.imap.openBox \"[Gmail]/All Mail\", false, @next\n//\t)\n//\n//\taddSearch: (query, update = 5) ->\n//\t\t@log \"adding a new search #{query}\"\n//\t\t@queries.push { query, freq: update }\n//\t\t# TODO extract check\n//\t\tchannel = @manager.createChannel query, update*1000\n//\t\tchannel.cmd = (next) =>\n//\t\t\t@fetchQuery query, channel.getConnection, =>\n//\t\t\t\tpromise = @fetchQuery2_ arguments\n//\t\t\t\tpromise.then =>\n//\t\t\t\t\tnext()\n//\t\t\t\t\t# TODO later\n//\t\t\t\t\t# @emit \"query-fetched\"\n//\t\t@manager.activate()\n//\n//\tfetchQuery: (query, connection, next) ->"],[1,"\r\n\tprivate monitored: (set?: Message[]) => Message[] = prop('monitored', null, []);\r\n\r\n\tconstructor(\r\n\t\tpublic manager: GmailManager,\r\n\t\tpublic name: string = \"noname\",\r\n\t\tpublic update_interval: number = 10*1000\r\n\t) {}\r\n\r\n\tfetch(next: () => any) {\r\n\t\t// TODO\r\n\t}\r\n\r\n\tprivate query(deferred: Promise.Deferred) {\r\n\t\timap = this.manager.connection\r\n\t\tvar next = (err, results) => this.results( deferred, err, results )\r\n\t\timap.search( [ [ 'X-GM-RAW', this.name ] ], next )\r\n\t}\r\n\r\n\tprivate results(deferred: Promise.Deferred, err, results) {\r"],[0,"\n//"],[1," "],[0,"\t\t"],[-1,"@this.log \"performing a search for #{query}\"\n//\t\tconnection.then =>\n//\t\t\t@this.imap.search [ [ 'X-GM-RAW', query ] ], next\n//\n//\tfetchQuery2_: (err, results) ->\n//"],[1,"imap = @manager.connection\r\n// "],[0,"\t\t# "]],"start1":1233,"start2":1233,"length1":2669,"length2":584},{"diffs":[[0,"bels"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t@"],[-1,"this."],[0,"log "]],"start1":1824,"start2":1824,"length1":19,"length2":16},{"diffs":[[0,"results'"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\tconten"]],"start1":1852,"start2":1852,"length1":19,"length2":21},{"diffs":[[0,"\"date\" ]"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\tfetch "]],"start1":1919,"start2":1919,"length1":19,"length2":21},{"diffs":[[0,"fetch = "],[-1,"@this."],[0,"imap.fet"]],"start1":1934,"start2":1934,"length1":22,"length2":16},{"diffs":[[0,"tent"],[-1,"\n//\n//\t\tdeferred = Promise.defer()\n//"],[1,"\r\n// "],[0,"\t\tfe"]],"start1":1965,"start2":1965,"length1":45,"length2":13},{"diffs":[[0,"e\", (msg) =>"],[1,"\r"],[0,"\n//"],[1," "],[0,"#\t\t\t\t\tmsg.on"]],"start1":1992,"start2":1992,"length1":27,"length2":29},{"diffs":[[0,") =>"],[1,"\r"],[0,"\n//"],[1," "],[0,"#\t\t\t\t\t\t@"],[-1,"this."],[0,"log "]],"start1":2036,"start2":2036,"length1":24,"length2":21},{"diffs":[[0,"k.length"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\tmsg.o"]],"start1":2092,"start2":2092,"length1":19,"length2":21},{"diffs":[[0,", =>"],[1,"\r"],[0,"\n//"],[1," #"],[0,"\t\t\t\t@"],[-1,"this."],[0,"log "]],"start1":2120,"start2":2120,"length1":21,"length2":19},{"diffs":[[0,"false, 5"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t\tif !"]],"start1":2180,"start2":2180,"length1":19,"length2":21},{"diffs":[[0,"\tif !~ @"],[-1,"this."],[0,"monitore"]],"start1":2196,"start2":2196,"length1":21,"length2":16},{"diffs":[[0,"nitored_"],[1,"()"],[0,".indexOf"]],"start1":2206,"start2":2206,"length1":16,"length2":18},{"diffs":[[0,"dexOf msg.id"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t\t\t# TODO "]],"start1":2219,"start2":2219,"length1":27,"length2":29},{"diffs":[[0,"DO event"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t\t\t@"],[-1,"this."],[0,"log 'new"]],"start1":2245,"start2":2245,"length1":30,"length2":27},{"diffs":[[0,"msg'"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t\t\t@"],[-1,"this."],[0,"moni"]],"start1":2273,"start2":2273,"length1":22,"length2":19},{"diffs":[[0,"nitored_"],[1,"()"],[0,".push ms"]],"start1":2290,"start2":2290,"length1":16,"length2":18},{"diffs":[[0,"h msg.id"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t\t\t# T"]],"start1":2304,"start2":2304,"length1":19,"length2":21},{"diffs":[[0,"DO later"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t\t\t# @"]],"start1":2326,"start2":2326,"length1":19,"length2":21},{"diffs":[[0,"new-msg\""],[1,"\r"],[0,"\n//"],[1," "],[0,"#\t\t\t\t\tel"]],"start1":2353,"start2":2353,"length1":19,"length2":21},{"diffs":[[0,"\t\t\t\telse"],[1,"\r"],[0,"\n//"],[1," "],[0,"#\t\t\t\t\t\t#"]],"start1":2368,"start2":2368,"length1":19,"length2":21},{"diffs":[[0,"e labels"],[1,"\r"],[0,"\n//"],[1," "],[0,"#\t\t\t\t\t\t#"]],"start1":2401,"start2":2401,"length1":19,"length2":21},{"diffs":[[0,"e thread"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t"],[1,"fetch.on \"end\", (err) =>\r\n// \t\t\t@log 'fetch ended'\r\n// \t"],[0,"\t\tdeferr"]],"start1":2448,"start2":2448,"length1":21,"length2":79},{"diffs":[[0,"olve"],[-1," msg"],[1,"()\r"],[0,"\n//"],[1," "],[0,"\t\tfe"]],"start1":2533,"start2":2533,"length1":15,"length2":15},{"diffs":[[0,"(err) =>"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\t# new"]],"start1":2564,"start2":2564,"length1":19,"length2":21},{"diffs":[[0,"rror ???"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t\t\tdefer"]],"start1":2587,"start2":2587,"length1":19,"length2":21},{"diffs":[[0," err"],[-1,"\n//\n//\t\t# ret\n//\t\tdeferred.promise\n//\n//\tclose: -> @imap.logout\n//\t"],[1,"\r\n\t}\r\n}\r\n\r\nclass GmailManager extends BaseClass {\r\n\t// locked: no\r\n\t// searches: prop('searches', null, [])\r\n\t// connection: null\r\n\t// settings: null\r\n\t\t\r\n\t// constructor: (@settings, next) ->\r\n\t// "],[0,"\t# TODO "],[-1,"remove channel from the manager\n//\n//Gmail.Manager :: GmailManagerCtr\n//Gmail.Manager = Gmail.Manager\n//\n//for prop, ctr of GmailCtr.oc\n//    continue if not Gmail::[prop] or\n//        prop is 'constructor'\n//    Gmail::[prop] :: ctr\n//    Gmail::[prop] = Gmail::[prop]\n//\n//box = null\n//ex(\n//\tclass Gmail\n//\t\tconstructor: (@a) ->"],[1,"no auto connect \r\n\t// \t@connect next\r\n\r\n\t// \tdo @repl if settings.repl\r\n\r\n\t// addSearch: (name, update_interval) ->\r\n\t// \t@searches().push new GmailSearch @, name, update_interval\r\n\t\t\t\t\t\r\n\t// # basic schedule implementation\r\n\t// activate: -> \r\n\t// \tsearch = @searches().sortBy(\"last_update\").first()\r\n\t// \t@log \"activating #{search.name}\"\r\n\t// \tif @cursor_ >= @searches().length\r\n\t// \t\t@cursor_ = 0\r\n\t// \t# get promise resolvals for the interval and the request\r\n\t// \tresolve = (Promise.defer() for i in [0, 1])\r\n\t// \tsetTimeout resolve[0].resolve, @minInterval_()\r\n\t// \t# run the search query\r\n\t// \tsearch.fetch resolve[1].resolve\r\n\t// \t# run activate once more after both promises are fulfilled\r\n\t// \tPromise.all(resolve).then @activate.bind @\r\n\t\t\t\t\t\r\n\t// minInterval_: ->\r\n\t// \t(Math.min ch.update_interval for ch in @searches())[0]\r\n\r\n\t// connect: def(\r\n\t// \t(@next) ->\r\n\t// \t\t@this.log 'connecting'\r\n\t// \t\tdata = @this.settings\r\n\t// \t\t@this.connection = new ImapConnection\r\n\t// \t\t\tusername: data.gmail_username\r\n\t// \t\t\tpassword: data.gmail_password \r\n\t// \t\t\thost: data.gmail_host or \"imap.gmail.com\"\r\n\t// \t\t\tport: 993\r\n\t// \t\t\tsecure: true\r\n\t// \t\t@this.connection.connect @\r\n\t// \t->\r\n\t// \t\t@this.connection.openBox \"[Gmail]/All Mail\", false, @next\r\n\t// )\r\n\t\r\n\t// disconnect: -> @connection.logout\r\n}\r\n\r\n// gmail = null\r\n// ex(\r"],[0,"\n//"],[1," "],[0,"\t-> "],[-1,"box"],[1,"gmail"],[0," = n"]],"start1":2618,"start2":2618,"length1":424,"length2":1558},{"diffs":[[0,"ew Gmail"],[1,"Manager"],[0," setting"]],"start1":4176,"start2":4176,"length1":16,"length2":23},{"diffs":[[0,"s, @"],[1,"\r"],[0,"\n//"],[1," "],[0,"\t->"],[-1," box"],[1,"\r\n// \t\tgmail"],[0,".add"]],"start1":4199,"start2":4199,"length1":18,"length2":28},{"diffs":[[0," '*'"],[-1,"\n//)"],[1,", 5000\r\n// \t\tgmail.activate()\r\n// )\r"],[0,"\n//"],[1," "],[0,"setT"]],"start1":4233,"start2":4233,"length1":15,"length2":48},{"diffs":[[0,"out "],[-1,"box.close.bind box, 20\n"],[1,"gmail.disconnect.bind gmail, 10*1000"]],"start1":4284,"start2":4284,"length1":27,"length2":40}]],"length":4324,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349367593550,"patch":[[{"diffs":[[0,"\n\r\n\t"],[-1,"private "],[0,"query"],[1,"_"],[0,"(def"]],"start1":1501,"start2":1501,"length1":21,"length2":14},{"diffs":[[0,"ults) =>"],[-1," "],[1,"\r\n\t\t\t"],[0,"this.res"]],"start1":1599,"start2":1599,"length1":17,"length2":21},{"diffs":[[0,".results"],[1,"_"],[0,"( deferr"]],"start1":1616,"start2":1616,"length1":16,"length2":17},{"diffs":[[0,"\n\r\n\t"],[-1,"private "],[0,"results"],[1,"_"],[0,"(def"]],"start1":1710,"start2":1710,"length1":23,"length2":16}]],"length":4315,"saved":false}

// Generated by CoffeeScript 1.8.0
(function() {
  var ApiError, Gmail, IMessage, IMessagePart, IQueryToTasklist, ITask, ITaskList, ITaskLists, ITasks, IThread, IThreads, Promise, States, Sync, TaskListSync, async, asyncmachine, auth, coroutine, google, promisify, type, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  auth = require('../auth');

  TaskListSync = require('./task-list-sync');

  type = require('../type');

  asyncmachine = require('asyncmachine');

  google = require('googleapis');

  async = require('async');

  Promise = require('bluebird');

  Gmail = require('./gmail').Gmail;

  ApiError = require('../exceptions').ApiError;

  Promise.longStackTraces();

  coroutine = Promise.coroutine;

  promisify = Promise.promisify;

  _ref = require('./api-types'), ITaskList = _ref.ITaskList, ITaskLists = _ref.ITaskLists, IQueryToTasklist = _ref.IQueryToTasklist, IThread = _ref.IThread, IThreads = _ref.IThreads, ITask = _ref.ITask, ITasks = _ref.ITasks, IMessage = _ref.IMessage, IMessagePart = _ref.IMessagePart;

  States = (function(_super) {
    __extends(States, _super);

    States.prototype.Enabled = {
      auto: true
    };

    States.prototype.Authenticating = {
      auto: true,
      requires: ['Enabled'],
      blocks: ['Authenticated']
    };

    States.prototype.Authenticated = {
      blocks: ['Authenticating']
    };

    States.prototype.Syncing = {
      auto: true,
      requires: ['Enabled', 'Authenticated'],
      blocks: ['Synced']
    };

    States.prototype.Synced = {
      blocks: ['Syncing']
    };

    States.prototype.TaskListSyncEnabled = {
      auto: true,
      requires: ['Syncing', 'QueryLabelsSynced', 'TaskListsFetched']
    };

    States.prototype.GmailSyncEnabled = {
      auto: true,
      requires: ['Syncing']
    };

    States.prototype.FetchingTaskLists = {
      auto: true,
      requires: ['Syncing'],
      blocks: ['TaskListsFetched']
    };

    States.prototype.TaskListsFetched = {
      blocks: ['FetchingTaskLists']
    };

    States.prototype.QueryLabelsSynced = {};

    function States() {
      States.__super__.constructor.apply(this, arguments);
      this.registerAll();
    }

    return States;

  })(asyncmachine.AsyncMachine);

  Sync = (function() {
    Sync.prototype.states = null;

    Sync.prototype.config = null;

    Sync.prototype.auth = null;

    Sync.prototype.tasks_api = null;

    Sync.prototype.gmail_api = null;

    Sync.prototype.task_lists = null;

    Sync.prototype.queries = null;

    Sync.prototype.etags = null;

    Sync.prototype.history_id = null;

    Object.defineProperty(Sync.prototype, 'history_id', {
      set: function(history_id) {
        return this.historyId = Math.max(this.history_id, history_id);
      }
    });

    function Sync(config) {
      this.config = config;
      this.states = new States;
      this.states.setTarget(this);
      if (process.env['DEBUG']) {
        this.states.debug('Sync / ', process.env['DEBUG']);
      }
      this.task_lists = [];
      this.labels = [];
      this.auth = new auth.Auth(config);
      this.task_lists = [];
      this.etags = {};
      this.tasks_api = new google.tasks('v1', {
        auth: this.auth.client
      });
      this.gmail_api = new google.gmail('v1', {
        auth: this.auth.client
      });
      this.gmail = new Gmail(this);
      this.states.pipeForward('GmailSyncEnabled', this.gmail.states, 'Enabled');
      this.initQueries();
      this.auth.pipeForward('Ready', this.states, 'Authenticated');
    }

    Sync.prototype.FetchingTaskLists_state = coroutine(function*() {
      var interrupt, res;
      interrupt = this.states.getInterrupt('FetchingTaskLists');
      res = (yield this.req(this.tasks_api.tasklists.list, {
        etag: this.etags.task_lists
      }));
      if (typeof interrupt === "function" ? interrupt() : void 0) {
        console.log('interrupt', interrupt);
        return;
      }
      if (res[1].statusCode !== 304) {
        console.log('[FETCHED] tasks lists');
        this.etags.task_lists = res[1].headers.etag;
        this.task_lists = type(res[0].items, ITaskLists, 'ITaskLists');
      } else {
        console.log('[CACHED] tasks lists');
      }
      return this.states.add('TaskListsFetched');
    });

    Sync.prototype.initQueries = function() {
      var data, name, task_list, _ref1, _results;
      _ref1 = this.config.tasks.queries;
      _results = [];
      for (name in _ref1) {
        data = _ref1[name];
        if (name === 'labels_defaults') {
          continue;
        }
        task_list = new TaskListSync(name, data, this);
        this.states.pipeForward('TaskListSyncEnabled', task_list.states, 'Enabled');
        _results.push(this.task_lists.push(task_list));
      }
      return _results;
    };

    Sync.prototype.scheduleNextSync = function() {
      var i, queries, query;
      if (this.concurrency.length >= this.max_concurrency) {
        return false;
      }
      queries = this.queries.sortBy("last_update");
      query = queries.first();
      i = 0;
      while (query.last_update + query.update_interval > Date.now()) {
        query = queries[i++];
        if (!query) {
          return false;
        }
      }
      this.log("activating " + query.name);
      if (this.concurrency.some((function(_this) {
        return function(s) {
          return s.name === query.name;
        };
      })(this))) {
        return false;
      }
      this.log('concurrency++');
      this.concurrency.push(query);
      query.add('FetchingQuery');
      return query.once('Fetching.Results.exit', (function(_this) {
        return function() {
          _this.concurrency = _this.concurrency.filter(function(row) {
            return row !== query;
          });
          _this.log('concurrency--');
          _this.add(['Delayed', 'HasMonitored']);
          return _this.add('Fetching');
        };
      })(this));
    };

    Sync.prototype.minInterval_ = function() {
      return Math.min.apply(null, this.queries.map((function(_this) {
        return function(ch) {
          return ch.update_interval;
        };
      })(this)));
    };

    Sync.prototype.setDirty = function() {
      return this.gmail.states.add('Dirty');
    };

    Sync.prototype.req = coroutine(function*(method, params) {
      if (params == null) {
        params = {};
      }
      if (process.env['DEBUG'] > 1) {
        console.log('REQUEST', params);
      }
      params.auth = this.auth.client;
      method = promisify(method);
      return (yield method(params));
    });

    return Sync;

  })();

  module.exports = {
    Sync: Sync,
    States: States
  };

}).call(this);

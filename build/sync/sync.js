// Generated by CoffeeScript 1.8.0
(function() {
  var IMessage, IMessagePart, IQuery, ITask, ITaskList, ITaskLists, ITasks, IThread, IThreads, Promise, States, Sync, async, asyncmachine, auth, coroutine, google, opt, promise_exception, promisify, type, typedef, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  auth = require('../auth');

  async = require('async');

  asyncmachine = require('asyncmachine');

  google = require('googleapis');

  Promise = require('bluebird');

  Promise.longStackTraces();

  coroutine = Promise.coroutine;

  promisify = Promise.promisify;

  typedef = require('tracery');

  opt = typedef.Optional;

  _ref = require('./api-types'), ITaskList = _ref.ITaskList, ITaskLists = _ref.ITaskLists, IQuery = _ref.IQuery, IThread = _ref.IThread, IThreads = _ref.IThreads, ITask = _ref.ITask, ITasks = _ref.ITasks, IMessage = _ref.IMessage, IMessagePart = _ref.IMessagePart;

  type = function(value, type, name) {
    if (Object.isArray(type)) {
      type = typedef(type);
    }
    if (!type(value)) {
      console.log(value);
      throw new TypeError(name || '');
    }
    return value;
  };

  promise_exception = function(e) {
    if (e.errors) {
      console.log(e.errors);
    }
    return console.log((e.stack.split("\n")).join("\n"));
  };

  States = (function(_super) {
    __extends(States, _super);

    function States() {
      States.__super__.constructor.apply(this, arguments);
      this.register('Ready', 'Authenticating', 'Authenticated', 'Syncing', 'Synced');
    }

    States.prototype.Ready = {
      auto: true,
      requires: ['Authenticated']
    };

    States.prototype.Authenticating = {
      blocks: ['Authenticated']
    };

    States.prototype.Authenticated = {
      blocks: ['Authenticating']
    };

    States.prototype.Syncing = {
      auto: true,
      requires: ['Ready'],
      blocks: ['Synced']
    };

    States.prototype.Synced = {
      blocks: ['Syncing']
    };

    return States;

  })(asyncmachine.AsyncMachine);

  Function.prototype.defineType = function(name, type, type_name) {
    return Object.defineProperty(this.prototype, name, {
      set: function(v) {
        type(v, ITaskLists, 'ITaskLists');
        return this.__task_lists = v;
      },
      get: function() {
        return this.__task_lists;
      }
    });
  };

  Sync = (function() {
    Sync.prototype.states = null;

    Sync.prototype.config = null;

    Sync.prototype.auth = null;

    Sync.prototype.tasks = null;

    Sync.prototype.gmail = null;

    Sync.prototype.task_lists = null;

    Sync.defineType('auth', auth.Auth, 'auth.Auth');

    function Sync(config) {
      this.config = config;
      this.states = new States;
      if (config.debug) {
        this.states.debug('Sync ', 2);
      }
      this.task_lists = [];
      this.labels = [];
      this.auth = new auth.Auth(config);
      this.tasks = new google.tasks('v1', {
        auth: this.auth.client
      });
      this.gmail = new google.gmail('v1', {
        auth: this.auth.client
      });
      this.states.add('Authenticating');
      this.states.on('Syncing.enter', (function(_this) {
        return function() {
          var promise;
          console.log('Syncing.enter');
          promise = _this.Syncing_enter();
          return promise["catch"](promise_exception);
        };
      })(this));
      this.states.on('Syncing.enter', this.Synced_enter);
      this.auth.pipeForward('Ready', this.states, 'Authenticated');
    }

    Sync.prototype.Syncing_enter = function() {
      var data, name, query, _i, _len, _ref1, _results;
      _ref1 = this.config.queries;
      _results = [];
      for (data = _i = 0, _len = _ref1.length; _i < _len; data = ++_i) {
        name = _ref1[data];
        query = new Query(name, data);
        this.states.pipeForward('LabelsFetched', query.states);
        _results.push(query.states.add('Syncing'));
      }
      return _results;
    };

    return Sync;

  })();

  module.exports = {
    Sync: Sync,
    States: States
  };

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var IMessage, IMessagePart, IQuery, ITask, ITaskList, ITaskLists, ITasks, IThread, IThreads, Promise, Query, States, Sync, async, asyncmachine, auth, coroutine, google, promise_exception, promisify, type, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  auth = require('../auth');

  Query = require('./query');

  type = require('../type');

  asyncmachine = require('asyncmachine');

  google = require('googleapis');

  async = require('async');

  Promise = require('bluebird');

  Promise.longStackTraces();

  coroutine = Promise.coroutine;

  promisify = Promise.promisify;

  _ref = require('./api-types'), ITaskList = _ref.ITaskList, ITaskLists = _ref.ITaskLists, IQuery = _ref.IQuery, IThread = _ref.IThread, IThreads = _ref.IThreads, ITask = _ref.ITask, ITasks = _ref.ITasks, IMessage = _ref.IMessage, IMessagePart = _ref.IMessagePart;

  promise_exception = function(e) {
    if (e.errors) {
      console.log(e.errors);
    }
    return console.log((e.stack.split("\n")).join("\n"));
  };

  States = (function(_super) {
    __extends(States, _super);

    function States() {
      States.__super__.constructor.apply(this, arguments);
      this.registerAll();
    }

    States.prototype.Enabled = {
      auto: true,
      blocks: ['Disabled']
    };

    States.prototype.Disabled = {
      auto: true,
      blocks: ['Enabled']
    };

    States.prototype.Authenticating = {
      auto: true,
      requires: ['Enabled'],
      blocks: ['Authenticated']
    };

    States.prototype.Authenticated = {
      blocks: ['Authenticating']
    };

    States.prototype.Syncing = {
      auto: true,
      requires: ['Enabled'],
      blocks: ['Synced']
    };

    States.prototype.Synced = {
      blocks: ['Syncing']
    };

    States.prototype.FetchingLabels = {
      auto: true,
      requires: ['Enabled', 'Authenticated'],
      blocks: ['LabelsFetched']
    };

    States.prototype.LabelsFetched = {
      blocks: ['FetchingLabels']
    };

    States.prototype.FetchingTaskLists = {
      auto: true,
      requires: ['Enabled', 'Authenticated'],
      blocks: ['TaskListsFetched']
    };

    States.prototype.TaskListsFetched = {
      blocks: ['FetchingTaskLists']
    };

    return States;

  })(asyncmachine.AsyncMachine);

  Sync = (function() {
    Sync.prototype.states = null;

    Sync.prototype.config = null;

    Sync.prototype.auth = null;

    Sync.prototype.tasks_api = null;

    Sync.prototype.gmail_api = null;

    Sync.prototype.task_lists = null;

    Sync.prototype.queries = null;

    function Sync(config) {
      this.config = config;
      this.states = new States;
      this.states.setTarget(this);
      if (this.config.debug) {
        this.states.debug('Sync / ', this.config.debug);
      }
      this.task_lists = [];
      this.labels = [];
      this.auth = new auth.Auth(config);
      this.queries = [];
      this.tasks_api = new google.tasks('v1', {
        auth: this.auth.client
      });
      this.gmail_api = new google.gmail('v1', {
        auth: this.auth.client
      });
      this.initQueries();
      this.auth.pipeForward('Ready', this.states, 'Authenticated');
    }

    Sync.prototype.initQueries = function() {
      var data, name, query, _ref1, _results;
      _ref1 = this.config.tasks.queries;
      _results = [];
      for (name in _ref1) {
        data = _ref1[name];
        if (name === 'labels_defaults') {
          continue;
        }
        query = new Query(name, data, this);
        this.states.pipeForward('LabelsFetched', query.states);
        this.states.pipeForward('TaskListsFetched', query.states);
        this.states.pipeForward('Enabled', query.states, 'Syncing');
        _results.push(this.queries.push(query));
      }
      return _results;
    };

    Sync.prototype.Syncing_enter = function() {
      var query, _i, _len, _ref1, _results;
      _ref1 = this.queries;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        query = _ref1[_i];
        _results.push(query.states.add('Syncing'));
      }
      return _results;
    };

    Sync.prototype.FetchingLabels_enter = coroutine(function*() {
      var res;
      res = (yield this.req(this.gmail_api.users.labels.list, {
        userId: 'me'
      }));
      this.labels = res[0].labels;
      return this.states.add('LabelsFetched');
    });

    Sync.prototype.FetchingTaskLists_enter = coroutine(function*() {
      var res;
      res = (yield this.req(this.tasks_api.tasklists.list));
      this.task_lists = type(res[0].items, ITaskLists, 'ITaskLists');
      return this.states.add('TaskListsFetched');
    });

    Sync.prototype.req = function(method, params) {
      if (params == null) {
        params = {};
      }
      if (this.config.debug) {
        console.log('REQUEST', params);
      }
      params.auth = this.auth.client;
      return (promisify(method))(params);
    };

    return Sync;

  })();

  module.exports = {
    Sync: Sync,
    States: States
  };

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var States, asyncmachine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  asyncmachine = require('asyncmachine');

  States = (function(_super) {
    __extends(States, _super);

    States.prototype.Enabled = {};

    States.prototype.Syncing = {
      auto: true,
      requires: ['Enabled'],
      blocks: ['Synced', 'Restart']
    };

    States.prototype.Synced = {
      blocks: ['Syncing'],
      requires: ['CompletedTasksSynced', 'ThreadsToTasksSynced', 'TasksToThreadsSynced', 'CompletedThreadsSynced']
    };

    States.prototype.Restart = {
      blocks: ['TasksFetched', 'CompletedTasksSynced', 'ThreadsToTasksSynced', 'TasksToThreadsSynced', 'CompletedThreadsSynced']
    };

    States.prototype.PreparingList = {
      auto: true,
      requires: ['Syncing'],
      blocks: ['ListReady']
    };

    States.prototype.ListReady = {
      blocks: ['PreparingList']
    };

    States.prototype.FetchingTasks = {
      auto: true,
      requires: ['Syncing', 'ListReady'],
      blocks: ['TasksFetched']
    };

    States.prototype.TasksFetched = {
      requires: ['ListReady'],
      blocks: ['FetchingTasks']
    };

    States.prototype.SyncingThreadsToTasks = {
      auto: true,
      requires: ['Syncing', 'TasksFetched', 'MsgsFetched'],
      blocks: ['ThreadsToTasksSynced']
    };

    States.prototype.ThreadsToTasksSynced = {
      blocks: ['SyncingThreadsToTasks']
    };

    States.prototype.SyncingTasksToThreads = {
      auto: true,
      requires: ['Syncing', 'TasksFetched', 'ThreadsFetched'],
      blocks: ['TasksToThreadsSynced']
    };

    States.prototype.TasksToThreadsSynced = {
      blocks: ['SyncingTasksToThreads']
    };

    States.prototype.SyncingCompletedThreads = {
      auto: true,
      requires: ['Syncing', 'TasksFetched', 'ThreadsFetched'],
      blocks: ['CompletedThreadsSynced']
    };

    States.prototype.CompletedThreadsSynced = {
      blocks: ['SyncingCompletedThreads']
    };

    States.prototype.SyncingCompletedTasks = {
      auto: true,
      requires: ['Syncing', 'TasksFetched', 'ThreadsFetched'],
      blocks: ['CompletedTasksSynced']
    };

    States.prototype.CompletedTasksSynced = {
      blocks: ['SyncingCompletedTasks']
    };

    States.prototype.ThreadsFetched = {};

    States.prototype.MsgsFetched = {};

    function States() {
      States.__super__.constructor.apply(this, arguments);
      this.registerAll();
    }

    return States;

  })(asyncmachine.AsyncMachine);

  module.exports = States;

}).call(this);

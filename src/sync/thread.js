// Generated by CoffeeScript 1.8.0
(function() {
  var Label, Thread, label;

  label = require('./label');

  Label = label.Label;

  Thread = (function() {
    Thread.prototype.labels = null;

    function Thread(gmail_thread) {
      this.gmail_thread = gmail_thread;
      this.labels = null;
      this.name = this.getFirstMessageSubject();
    }

    Thread.prototype.getName = function() {
      return this.name;
    };

    Thread.prototype.getLabels = function() {
      var tmp, _i, _len, _ref;
      if (this.labels == null) {
        this.labels = [];
        _ref = this.gmail_thread.getLabels();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          label = _ref[_i];
          tmp = new Label(label);
          this.labels.push(tmp.getName());
        }
        if (this.gmail_thread.isInInbox()) {
          this.labels.push('inbox');
        }
        if (this.gmail_thread.isInChats()) {
          this.labels.push('chat');
        }
        Logger.log("Found " + this.labels.length + " labels for thread '" + this + "'.");
      }
      return this.labels;
    };

    Thread.prototype.hasLabel = function(label) {
      return this.getLabels().contains(Label.normalizeName(label));
    };

    Thread.prototype.addLabel = function(label) {
      label = Label.get(label);
      return label.addToThread(this);
    };

    Thread.prototype.removeLabel = function(label) {
      label = Label.get(label);
      return label.removeFromThread(this);
    };

    Thread.prototype.disposeLabelCache_ = function() {
      Logger.log("Disposing labels cache for thread '" + this + "'");
      return this.labels = null;
    };

    Thread.prototype.addLabels = function(labels) {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = labels.length; _i < _len; _i++) {
        label = labels[_i];
        _results.push(this.addLabel(label));
      }
      return _results;
    };

    Thread.prototype.toString = function() {
      return this.getName();
    };

    Thread.get = function(thread) {
      if (thread instanceof Thread) {
        return thread;
      } else {
        return new Thread(thread);
      }
    };

    return Thread;

  })();

}).call(this);

//# sourceMappingURL=thread.js.map
